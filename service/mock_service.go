// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/br3w0r/gamelist-backend/repository (interfaces: GamelistRepository)

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	entity "github.com/br3w0r/gamelist-backend/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockGamelistRepository is a mock of GamelistRepository interface.
type MockGamelistRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGamelistRepositoryMockRecorder
}

// MockGamelistRepositoryMockRecorder is the mock recorder for MockGamelistRepository.
type MockGamelistRepositoryMockRecorder struct {
	mock *MockGamelistRepository
}

// NewMockGamelistRepository creates a new mock instance.
func NewMockGamelistRepository(ctrl *gomock.Controller) *MockGamelistRepository {
	mock := &MockGamelistRepository{ctrl: ctrl}
	mock.recorder = &MockGamelistRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGamelistRepository) EXPECT() *MockGamelistRepositoryMockRecorder {
	return m.recorder
}

// CreateListType mocks base method.
func (m *MockGamelistRepository) CreateListType(arg0 entity.ListType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateListType", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateListType indicates an expected call of CreateListType.
func (mr *MockGamelistRepositoryMockRecorder) CreateListType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateListType", reflect.TypeOf((*MockGamelistRepository)(nil).CreateListType), arg0)
}

// CreateProfile mocks base method.
func (m *MockGamelistRepository) CreateProfile(arg0 entity.Profile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProfile indicates an expected call of CreateProfile.
func (mr *MockGamelistRepositoryMockRecorder) CreateProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfile", reflect.TypeOf((*MockGamelistRepository)(nil).CreateProfile), arg0)
}

// DeleteAllUserRefreshTokens mocks base method.
func (m *MockGamelistRepository) DeleteAllUserRefreshTokens(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllUserRefreshTokens", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllUserRefreshTokens indicates an expected call of DeleteAllUserRefreshTokens.
func (mr *MockGamelistRepositoryMockRecorder) DeleteAllUserRefreshTokens(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllUserRefreshTokens", reflect.TypeOf((*MockGamelistRepository)(nil).DeleteAllUserRefreshTokens), arg0)
}

// DeleteRefreshToken mocks base method.
func (m *MockGamelistRepository) DeleteRefreshToken(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRefreshToken", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRefreshToken indicates an expected call of DeleteRefreshToken.
func (mr *MockGamelistRepositoryMockRecorder) DeleteRefreshToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRefreshToken", reflect.TypeOf((*MockGamelistRepository)(nil).DeleteRefreshToken), arg0)
}

// FindRefreshToken mocks base method.
func (m *MockGamelistRepository) FindRefreshToken(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRefreshToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindRefreshToken indicates an expected call of FindRefreshToken.
func (mr *MockGamelistRepositoryMockRecorder) FindRefreshToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRefreshToken", reflect.TypeOf((*MockGamelistRepository)(nil).FindRefreshToken), arg0, arg1)
}

// GetAllGames mocks base method.
func (m *MockGamelistRepository) GetAllGames() ([]entity.GameProperties, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGames")
	ret0, _ := ret[0].([]entity.GameProperties)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllGames indicates an expected call of GetAllGames.
func (mr *MockGamelistRepositoryMockRecorder) GetAllGames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGames", reflect.TypeOf((*MockGamelistRepository)(nil).GetAllGames))
}

// GetAllGamesTyped mocks base method.
func (m *MockGamelistRepository) GetAllGamesTyped(arg0 string, arg1 uint64, arg2 int) ([]entity.TypedGameListProperties, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGamesTyped", arg0, arg1, arg2)
	ret0, _ := ret[0].([]entity.TypedGameListProperties)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllGamesTyped indicates an expected call of GetAllGamesTyped.
func (mr *MockGamelistRepositoryMockRecorder) GetAllGamesTyped(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGamesTyped", reflect.TypeOf((*MockGamelistRepository)(nil).GetAllGamesTyped), arg0, arg1, arg2)
}

// GetAllGenres mocks base method.
func (m *MockGamelistRepository) GetAllGenres() ([]entity.Genre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGenres")
	ret0, _ := ret[0].([]entity.Genre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllGenres indicates an expected call of GetAllGenres.
func (mr *MockGamelistRepositoryMockRecorder) GetAllGenres() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGenres", reflect.TypeOf((*MockGamelistRepository)(nil).GetAllGenres))
}

// GetAllListTypes mocks base method.
func (m *MockGamelistRepository) GetAllListTypes() ([]entity.ListType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllListTypes")
	ret0, _ := ret[0].([]entity.ListType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllListTypes indicates an expected call of GetAllListTypes.
func (mr *MockGamelistRepositoryMockRecorder) GetAllListTypes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllListTypes", reflect.TypeOf((*MockGamelistRepository)(nil).GetAllListTypes))
}

// GetAllPlatforms mocks base method.
func (m *MockGamelistRepository) GetAllPlatforms() ([]entity.Platform, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPlatforms")
	ret0, _ := ret[0].([]entity.Platform)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPlatforms indicates an expected call of GetAllPlatforms.
func (mr *MockGamelistRepositoryMockRecorder) GetAllPlatforms() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPlatforms", reflect.TypeOf((*MockGamelistRepository)(nil).GetAllPlatforms))
}

// GetAllProfiles mocks base method.
func (m *MockGamelistRepository) GetAllProfiles() ([]entity.ProfileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProfiles")
	ret0, _ := ret[0].([]entity.ProfileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProfiles indicates an expected call of GetAllProfiles.
func (mr *MockGamelistRepositoryMockRecorder) GetAllProfiles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProfiles", reflect.TypeOf((*MockGamelistRepository)(nil).GetAllProfiles))
}

// GetAllSocialTypes mocks base method.
func (m *MockGamelistRepository) GetAllSocialTypes() ([]entity.SocialType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSocialTypes")
	ret0, _ := ret[0].([]entity.SocialType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSocialTypes indicates an expected call of GetAllSocialTypes.
func (mr *MockGamelistRepositoryMockRecorder) GetAllSocialTypes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSocialTypes", reflect.TypeOf((*MockGamelistRepository)(nil).GetAllSocialTypes))
}

// GetGameDetails mocks base method.
func (m *MockGamelistRepository) GetGameDetails(arg0 string, arg1 uint64) (*entity.GameDetailsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGameDetails", arg0, arg1)
	ret0, _ := ret[0].(*entity.GameDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGameDetails indicates an expected call of GetGameDetails.
func (mr *MockGamelistRepositoryMockRecorder) GetGameDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGameDetails", reflect.TypeOf((*MockGamelistRepository)(nil).GetGameDetails), arg0, arg1)
}

// GetProfile mocks base method.
func (m *MockGamelistRepository) GetProfile(arg0 entity.ProfileCreds) (*entity.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", arg0)
	ret0, _ := ret[0].(*entity.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockGamelistRepositoryMockRecorder) GetProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockGamelistRepository)(nil).GetProfile), arg0)
}

// GetUserGameList mocks base method.
func (m *MockGamelistRepository) GetUserGameList(arg0 string) ([]entity.TypedGameListProperties, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserGameList", arg0)
	ret0, _ := ret[0].([]entity.TypedGameListProperties)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserGameList indicates an expected call of GetUserGameList.
func (mr *MockGamelistRepositoryMockRecorder) GetUserGameList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserGameList", reflect.TypeOf((*MockGamelistRepository)(nil).GetUserGameList), arg0)
}

// ListGame mocks base method.
func (m *MockGamelistRepository) ListGame(arg0 string, arg1, arg2 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGame", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListGame indicates an expected call of ListGame.
func (mr *MockGamelistRepositoryMockRecorder) ListGame(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGame", reflect.TypeOf((*MockGamelistRepository)(nil).ListGame), arg0, arg1, arg2)
}

// SaveGame mocks base method.
func (m *MockGamelistRepository) SaveGame(arg0 entity.GameProperties) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveGame", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveGame indicates an expected call of SaveGame.
func (mr *MockGamelistRepositoryMockRecorder) SaveGame(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveGame", reflect.TypeOf((*MockGamelistRepository)(nil).SaveGame), arg0)
}

// SaveGenre mocks base method.
func (m *MockGamelistRepository) SaveGenre(arg0 entity.Genre) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveGenre", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveGenre indicates an expected call of SaveGenre.
func (mr *MockGamelistRepositoryMockRecorder) SaveGenre(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveGenre", reflect.TypeOf((*MockGamelistRepository)(nil).SaveGenre), arg0)
}

// SavePlatform mocks base method.
func (m *MockGamelistRepository) SavePlatform(arg0 entity.Platform) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePlatform", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePlatform indicates an expected call of SavePlatform.
func (mr *MockGamelistRepositoryMockRecorder) SavePlatform(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePlatform", reflect.TypeOf((*MockGamelistRepository)(nil).SavePlatform), arg0)
}

// SaveProfile mocks base method.
func (m *MockGamelistRepository) SaveProfile(arg0 entity.Profile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveProfile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveProfile indicates an expected call of SaveProfile.
func (mr *MockGamelistRepositoryMockRecorder) SaveProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveProfile", reflect.TypeOf((*MockGamelistRepository)(nil).SaveProfile), arg0)
}

// SaveRefreshToken mocks base method.
func (m *MockGamelistRepository) SaveRefreshToken(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRefreshToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRefreshToken indicates an expected call of SaveRefreshToken.
func (mr *MockGamelistRepositoryMockRecorder) SaveRefreshToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRefreshToken", reflect.TypeOf((*MockGamelistRepository)(nil).SaveRefreshToken), arg0, arg1)
}

// SaveSocialType mocks base method.
func (m *MockGamelistRepository) SaveSocialType(arg0 entity.SocialType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSocialType", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSocialType indicates an expected call of SaveSocialType.
func (mr *MockGamelistRepositoryMockRecorder) SaveSocialType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSocialType", reflect.TypeOf((*MockGamelistRepository)(nil).SaveSocialType), arg0)
}

// SearchGames mocks base method.
func (m *MockGamelistRepository) SearchGames(arg0 string) ([]entity.GameSearchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchGames", arg0)
	ret0, _ := ret[0].([]entity.GameSearchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchGames indicates an expected call of SearchGames.
func (mr *MockGamelistRepositoryMockRecorder) SearchGames(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchGames", reflect.TypeOf((*MockGamelistRepository)(nil).SearchGames), arg0)
}
